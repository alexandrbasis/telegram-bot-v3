"""Tests for schedule formatter utilities."""

import datetime as dt

from src.models.schedule import ScheduleEntry
from src.utils.schedule_formatter import format_schedule_day


def _entry(day: dt.date, hour: int, minute: int, title: str, **kwargs) -> ScheduleEntry:
    return ScheduleEntry(
        date=day,
        start_time=dt.time(hour, minute),
        title=title,
        **kwargs,
    )


def _bullet_lines(text: str) -> list[str]:
    return [line for line in text.splitlines() if line.startswith("‚Ä¢ ")]


def test_format_schedule_day_orders_by_time_then_order():
    day = dt.date(2025, 11, 13)
    entries = [
        _entry(day, 10, 0, "Second", order=5),
        _entry(day, 9, 0, "First"),
        _entry(day, 10, 0, "Priority", order=1),
    ]

    text = format_schedule_day(day, entries)

    bullets = _bullet_lines(text)

    assert bullets[0].startswith("‚Ä¢ 09:00")
    assert "First" in bullets[0]
    assert "Priority" in bullets[1]
    assert "Second" in bullets[2]


def test_format_schedule_day_handles_empty_day():
    day = dt.date(2025, 11, 14)

    text = format_schedule_day(day, [])

    assert "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π" in text


def test_format_schedule_day_includes_day_label_sections_and_details():
    day = dt.date(2025, 11, 15)
    entries = [
        _entry(
            day,
            5,
            30,
            "–ü–æ–¥—ä—ë–º",
            audience="Team",
            description="–†–∞–∑–¥–µ–ª: üïî –£—Ç—Ä–æ\n–ù–∞—á–∞–ª–æ –¥–Ω—è",
            day_label="–î–µ–Ω—å –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ",
        ),
        _entry(
            day,
            6,
            0,
            "–ú–æ–ª–∏—Ç–≤–∞",
            audience="All",
        ),
        _entry(
            day,
            10,
            40,
            "–°–±–æ—Ä –≤–µ—â–µ–π",
            audience="Candidates",
            location="üì¶ –°–±–æ—Ä—ã",
            description="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–µ–∑–¥—É",
        ),
    ]

    text = format_schedule_day(day, entries)
    lines = text.splitlines()

    assert lines[0] == "üìÖ 2025-11-15 ‚Äî –î–µ–Ω—å –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ"
    assert "üïî –£—Ç—Ä–æ" in lines
    assert "üì¶ –°–±–æ—Ä—ã" in lines

    bullets = _bullet_lines(text)
    assert bullets[0].endswith("‚Äî –¢–∏–º—ã")
    assert bullets[1].endswith("‚Äî –í—Å–µ")
    assert bullets[2].endswith("‚Äî –ö–∞–Ω–¥–∏–¥–∞—Ç—ã")

    detail_lines = [line for line in lines if line.strip().startswith("‚ó¶ ")]
    assert "–ù–∞—á–∞–ª–æ –¥–Ω—è" in detail_lines[0]
    assert "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–µ–∑–¥—É" in detail_lines[-1]

    assert "Team" not in text
    assert "All" not in text
    assert "Candidates" not in text


def test_format_schedule_day_includes_location_details_without_sections():
    day = dt.date(2025, 11, 16)
    entries = [
        _entry(
            day,
            8,
            30,
            "–°–ª—É–∂–µ–Ω–∏–µ",
            end_time=dt.time(9, 30),
            location="–ì–ª–∞–≤–Ω—ã–π –∑–∞–ª",
            audience="leadership",
            description="–ü—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ\n–ú–æ–ª–∏—Ç–≤–∞",
        )
    ]

    text = format_schedule_day(day, entries)
    bullets = _bullet_lines(text)

    assert bullets[0].startswith("‚Ä¢ 08:30‚Äì09:30 –°–ª—É–∂–µ–Ω–∏–µ")
    assert bullets[0].endswith("‚Äî –¢–∏–º—ã")

    detail_lines = [
        line.strip() for line in text.splitlines() if line.strip().startswith("‚ó¶ ")
    ]
    assert "–ì–ª–∞–≤–Ω—ã–π –∑–∞–ª" in detail_lines[0]
    assert "–ü—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ" in detail_lines[1]
    assert "–ú–æ–ª–∏—Ç–≤–∞" in detail_lines[2]
