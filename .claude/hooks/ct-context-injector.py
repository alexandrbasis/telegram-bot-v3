#!/usr/bin/env python3
"""
–•—É–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ct (create task) - –¥–æ–±–∞–≤–ª—è–µ—Ç project_index.json –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
–¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
"""

import json
import logging
import os
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("ct-hook")


def load_project_index(project_dir: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç project_index.json"""
    index_path = Path(project_dir) / "project_index.json"

    if not index_path.exists():
        logger.warning(f"–ò–Ω–¥–µ–∫—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {index_path}")
        return None

    try:
        with open(index_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        return None


def format_context_summary(index_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if not index_data:
        return "‚ùå Project index unavailable"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω–¥–µ–∫—Å–∞
    metadata = index_data.get("project_overview", {})
    key_modules = index_data.get("key_modules", {})
    architecture_patterns = index_data.get("architecture_patterns", [])
    key_features = index_data.get("key_features", [])
    project_stats = index_data.get("project_statistics", {})
    current_context = index_data.get("current_development_context", {})

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
    python_files = project_stats.get("python_files", 0)
    total_files = project_stats.get("total_files", 0)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–ª–æ–∏ –∏–∑ key_modules
    architecture_layers = []
    for module_category, modules in key_modules.items():
        architecture_layers.append(module_category)

    # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ –º–æ–¥—É–ª—è–º
    file_types = {}
    for category, modules in key_modules.items():
        if isinstance(modules, list):
            file_types[category] = len(modules)
        elif isinstance(modules, dict):
            file_types[category] = len(modules)

    context = f"""# üìã Project Structure Context (Auto-injected for /ct)

## Project Overview
- **Name**: {metadata.get('name', 'Unknown')}
- **Description**: {metadata.get('description', 'No description available')}
- **Architecture**: {metadata.get('architecture', 'Not specified')}
- **Last Updated**: {metadata.get('last_updated', 'Unknown')}
- **Python Files**: {python_files}/{total_files}

## Architecture Layers
{', '.join(sorted(architecture_layers)) if architecture_layers else 'Not analyzed'}

## Module Distribution
"""

    for category, count in sorted(file_types.items()):
        context += f"- **{category}**: {count} modules\n"

    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if architecture_patterns:
        context += f"\n## Architecture Patterns\n"
        patterns_list = (
            list(architecture_patterns)
            if hasattr(architecture_patterns, "__iter__")
            else [str(architecture_patterns)]
        )
        for pattern in patterns_list[:5]:
            context += f"- {pattern}\n"

    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if key_features:
        context += f"\n## Key Features\n"
        if isinstance(key_features, dict):
            items = list(key_features.items())
            for feature, details in items[:5]:
                desc = (
                    details.get("description", str(details))
                    if isinstance(details, dict)
                    else str(details)
                )
                context += f"- **{feature}** - {desc}\n"
        elif isinstance(key_features, list):
            for feature in key_features[:5]:
                context += f"- {feature}\n"
        else:
            context += f"- {str(key_features)}\n"

    # –ö–ª—é—á–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, modules in key_modules.items():
        if modules:
            context += f"\n## {category.replace('_', ' ').title()}\n"
            if isinstance(modules, list):
                module_list = list(modules)
                for module in module_list[:5]:
                    context += f"- `{module}`\n"
            elif isinstance(modules, dict):
                items = list(modules.items())
                for module, desc in items[:5]:
                    context += f"- `{module}` - {desc}\n"
            else:
                context += f"- {str(modules)}\n"

    # –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if current_context:
        context += f"\n## Current Development Context\n"
        for key, value in current_context.items():
            if isinstance(value, list) and value:
                value_list = list(value)
                context += f"- **{key.replace('_', ' ').title()}**: {', '.join(value_list[:3])}\n"
            elif isinstance(value, str):
                context += f"- **{key.replace('_', ' ').title()}**: {value}\n"

    context += f"\n---\n*This context was automatically injected by ct-context-injector hook*\n"

    return context


def main():
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Claude Code
        input_data = json.load(sys.stdin)

        tool_name = input_data.get("tool_name", "")
        project_dir = input_data.get("cwd", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–∑–æ–≤ Task tool (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /ct)
        if tool_name != "Task":
            logger.debug(f"–•—É–∫ –Ω–µ –¥–ª—è Task tool: {tool_name}")
            sys.exit(0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CLAUDE_PROJECT_DIR
        claude_project_dir = os.environ.get("CLAUDE_PROJECT_DIR")
        if claude_project_dir:
            project_dir = claude_project_dir

        if not project_dir:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞")
            sys.exit(0)

        logger.info(f"üéØ /ct –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞...")
        logger.info(f"üìÅ Project dir: {project_dir}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–µ–∫—Ç–∞
        index_data = load_project_index(project_dir)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_summary = format_context_summary(index_data)

        # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ stdout –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é Claude
        print(context_summary)

        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è /ct –∫–æ–º–∞–Ω–¥—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ct-context-injector: {e}")
        sys.exit(0)  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ


if __name__ == "__main__":
    main()
