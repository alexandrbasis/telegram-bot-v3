{
  "project_overview": {
    "name": "telegram-bot-v3",
    "description": "Telegram bot for participant management with Airtable integration and Russian/English fuzzy search",
    "architecture": "3-layer architecture (bot/services/data) with repository pattern",
    "main_language": "python",
    "last_updated": "2025-09-01T20:53:58.780619"
  },
  "project_structure": {
    "tree": "telegram-bot-v3/\n├── .claude/\n    ├── agents/\n        ├── adr-manager.md\n        ├── changelog-generator.md\n        ├── code-review-responder.md\n        ├── comprehensive-researcher.md\n        ├── create-pr-agent.md\n        ├── debugger.md\n        ├── docs-updater.md\n        ├── error-detective.md\n        ├── plan-reviewer.md\n        ├── prompt-optimizer.md\n        ├── search-specialist.md\n        └── task-splitter.md\n    ├── commands/\n        ├── README.md\n        ├── ar.md\n        ├── cda.md\n        ├── ci.md\n        ├── cp.md\n        ├── create-pull-request.md\n        ├── ct.md\n        ├── jb.md\n        ├── mp.md\n        ├── ph.md\n        ├── si.md\n        └── sr.md\n    ├── hooks/\n        ├── ct-context-injector.py\n        ├── log_action.sh\n        ├── telegram_notify.py\n        ├── telegram_notify_wrapper.sh\n        ├── update-index.py\n        └── update-index.sh\n    ├── config.json\n    └── settings.local.json\n├── .mypy_cache/\n    └── 3.9/\n        ├── _typeshed/\n        ├── annotated_types/\n        ├── anyio/\n        ├── asyncio/\n        ├── certifi/\n        ├── click/\n        ├── collections/\n        ├── concurrent/\n        ├── ctypes/\n        ├── email/\n        ├── h11/\n        ├── html/\n        ├── http/\n        ├── httpcore/\n        ├── httpx/\n        ├── idna/\n        ├── importlib/\n        ├── inflection/\n        ├── json/\n        ├── logging/\n        ├── multiprocessing/\n        ├── os/\n        ├── pathlib/\n        ├── pyairtable/\n        ├── pydantic/\n        ├── pydantic_core/\n        ├── rapidfuzz/\n        ├── sniffio/\n        ├── src/\n        ├── string/\n        ├── sys/\n        ├── telegram/\n        ├── typing_inspection/\n        ├── urllib/\n        ├── urllib3/\n        ├── zoneinfo/\n        ├── @plugins_snapshot.json\n        ├── __future__.data.json\n        ├── __future__.meta.json\n        ├── _ast.data.json\n        ├── _ast.meta.json\n        ├── _asyncio.data.json\n        ├── _asyncio.meta.json\n        ├── _bisect.data.json\n        ├── _bisect.meta.json\n        ├── _blake2.data.json\n        ├── _blake2.meta.json\n        ├── _bz2.data.json\n        ├── _bz2.meta.json\n        ├── _codecs.data.json\n        ├── _codecs.meta.json\n        ├── _collections_abc.data.json\n        ├── _collections_abc.meta.json\n        ├── _compression.data.json\n        ├── _compression.meta.json\n        ├── _contextvars.data.json\n        ├── _contextvars.meta.json\n        ├── _ctypes.data.json\n        ├── _ctypes.meta.json\n        ├── _decimal.data.json\n        ├── _decimal.meta.json\n        ├── _frozen_importlib.data.json\n        ├── _frozen_importlib.meta.json\n        ├── _frozen_importlib_external.data.json\n        ├── _frozen_importlib_external.meta.json\n        ├── _hashlib.data.json\n        ├── _hashlib.meta.json\n        ├── _io.data.json\n        ├── _io.meta.json\n        ├── _operator.data.json\n        ├── _operator.meta.json\n        ├── _pickle.data.json\n        ├── _pickle.meta.json\n        ├── _queue.data.json\n        ├── _queue.meta.json\n        ├── _random.data.json\n        ├── _random.meta.json\n        ├── _sitebuiltins.data.json\n        ├── _sitebuiltins.meta.json\n        ├── _socket.data.json\n        ├── _socket.meta.json\n        ├── _ssl.data.json\n        ├── _ssl.meta.json\n        ├── _stat.data.json\n        ├── _stat.meta.json\n        ├── _thread.data.json\n        ├── _thread.meta.json\n        ├── _warnings.data.json\n        ├── _warnings.meta.json\n        ├── _weakref.data.json\n        ├── _weakref.meta.json\n        ├── _weakrefset.data.json\n        ├── _weakrefset.meta.json\n        ├── abc.data.json\n        ├── abc.meta.json\n        ├── ast.data.json\n        ├── ast.meta.json\n        ├── atexit.data.json\n        ├── atexit.meta.json\n        ├── base64.data.json\n        ├── base64.meta.json\n        ├── binascii.data.json\n        ├── binascii.meta.json\n        ├── bisect.data.json\n        ├── bisect.meta.json\n        ├── builtins.data.json\n        ├── builtins.meta.json\n        ├── bz2.data.json\n        ├── bz2.meta.json\n        ├── codecs.data.json\n        ├── codecs.meta.json\n        ├── colorsys.data.json\n        ├── colorsys.meta.json\n        ├── contextlib.data.json\n        ├── contextlib.meta.json\n        ├── contextvars.data.json\n        ├── contextvars.meta.json\n        ├── copy.data.json\n        ├── copy.meta.json\n        ├── copyreg.data.json\n        ├── copyreg.meta.json\n        ├── dataclasses.data.json\n        ├── dataclasses.meta.json\n        ├── datetime.data.json\n        ├── datetime.meta.json\n        ├── decimal.data.json\n        ├── decimal.meta.json\n        ├── difflib.data.json\n        ├── difflib.meta.json\n        ├── dis.data.json\n        ├── dis.meta.json\n        ├── enum.data.json\n        ├── enum.meta.json\n        ├── errno.data.json\n        ├── errno.meta.json\n        ├── fractions.data.json\n        ├── fractions.meta.json\n        ├── functools.data.json\n        ├── functools.meta.json\n        ├── genericpath.data.json\n        ├── genericpath.meta.json\n        ├── gettext.data.json\n        ├── gettext.meta.json\n        ├── gzip.data.json\n        ├── gzip.meta.json\n        ├── hashlib.data.json\n        ├── hashlib.meta.json\n        ├── hmac.data.json\n        ├── hmac.meta.json\n        ├── inspect.data.json\n        ├── inspect.meta.json\n        ├── io.data.json\n        ├── io.meta.json\n        ├── ipaddress.data.json\n        ├── ipaddress.meta.json\n        ├── itertools.data.json\n        ├── itertools.meta.json\n        ├── keyword.data.json\n        ├── keyword.meta.json\n        ├── math.data.json\n        ├── math.meta.json\n        ├── mimetypes.data.json\n        ├── mimetypes.meta.json\n        ├── netrc.data.json\n        ├── netrc.meta.json\n        ├── numbers.data.json\n        ├── numbers.meta.json\n        ├── opcode.data.json\n        ├── opcode.meta.json\n        ├── operator.data.json\n        ├── operator.meta.json\n        ├── pickle.data.json\n        ├── pickle.meta.json\n        ├── platform.data.json\n        ├── platform.meta.json\n        ├── posixpath.data.json\n        ├── posixpath.meta.json\n        ├── queue.data.json\n        ├── queue.meta.json\n        ├── random.data.json\n        ├── random.meta.json\n        ├── re.data.json\n        ├── re.meta.json\n        ├── resource.data.json\n        ├── resource.meta.json\n        ├── select.data.json\n        ├── select.meta.json\n        ├── selectors.data.json\n        ├── selectors.meta.json\n        ├── shlex.data.json\n        ├── shlex.meta.json\n        ├── shutil.data.json\n        ├── shutil.meta.json\n        ├── signal.data.json\n        ├── signal.meta.json\n        ├── socket.data.json\n        ├── socket.meta.json\n        ├── sre_compile.data.json\n        ├── sre_compile.meta.json\n        ├── sre_constants.data.json\n        ├── sre_constants.meta.json\n        ├── sre_parse.data.json\n        ├── sre_parse.meta.json\n        ├── ssl.data.json\n        ├── ssl.meta.json\n        ├── stat.data.json\n        ├── stat.meta.json\n        ├── subprocess.data.json\n        ├── subprocess.meta.json\n        ├── tarfile.data.json\n        ├── tarfile.meta.json\n        ├── tempfile.data.json\n        ├── tempfile.meta.json\n        ├── termios.data.json\n        ├── termios.meta.json\n        ├── textwrap.data.json\n        ├── textwrap.meta.json\n        ├── threading.data.json\n        ├── threading.meta.json\n        ├── time.data.json\n        ├── time.meta.json\n        ├── tty.data.json\n        ├── tty.meta.json\n        ├── types.data.json\n        ├── types.meta.json\n        ├── typing.data.json\n        ├── typing.meta.json\n        ├── typing_extensions.data.json\n        ├── typing_extensions.meta.json\n        ├── unicodedata.data.json\n        ├── unicodedata.meta.json\n        ├── uuid.data.json\n        ├── uuid.meta.json\n        ├── warnings.data.json\n        ├── warnings.meta.json\n        ├── weakref.data.json\n        ├── weakref.meta.json\n        ├── zlib.data.json\n        └── zlib.meta.json\n├── .obsidian/\n    ├── app.json\n    ├── appearance.json\n    ├── core-plugins.json\n    └── workspace.json\n├── docs/\n    ├── architecture/\n        ├── api-design.md\n        ├── architecture-overview.md\n        ├── database-design.md\n        └── migration-strategy.md\n    ├── business/\n        ├── business-requirements.md\n        ├── feature-specifications.md\n        └── user-stories.md\n    ├── data-integration/\n        ├── airtable-setup.md\n        ├── airtable_database_structure.md\n        ├── data-backup-restore.md\n        └── field-mappings.md\n    ├── development/\n        ├── coding-standards.md\n        ├── deployment-guide.md\n        ├── development-workflow.md\n        └── testing-strategy.md\n    └── technical/\n        ├── bot-commands.md\n        ├── configuration.md\n        ├── performance-considerations.md\n        └── troubleshooting.md\n├── logs/\n    ├── application/\n    ├── archived/\n    ├── errors/\n    └── user-interactions/\n├── requirements/\n    ├── base.txt\n    ├── dev.txt\n    └── test.txt\n├── src/\n    ├── bot/\n        ├── handlers/\n        ├── keyboards/\n        └── __init__.py\n    ├── config/\n        ├── __init__.py\n        ├── field_mappings.py (Airtable field ID mappings)\n        └── settings.py (centralized app configuration)\n    ├── data/\n        ├── airtable/\n        ├── repositories/\n        ├── __init__.py\n        └── data_validator.py\n    ├── models/\n        ├── __init__.py\n        └── participant.py (participant data model with enums)\n    ├── services/\n        ├── __init__.py\n        ├── file_logging_service.py\n        ├── participant_update_service.py\n        ├── search_service.py (fuzzy search with Russian/English support)\n        └── user_interaction_logger.py\n    ├── utils/\n        ├── __init__.py\n        └── test_helper.py\n    ├── __init__.py\n    └── main.py (application entry point)\n├── tasks/\n    ├── completed/\n        ├── task-2025-08-27-airtable-field-ids-integration/\n        ├── task-2025-08-27-database-setup/\n        ├── task-2025-08-27-phase-1-foundation/\n        ├── task-2025-08-28-fix-russian-search/\n        ├── task-2025-08-28-russian-name-search/\n        ├── task-2025-08-28-search-results-enhancement/\n        ├── task-2025-08-29-detailed-user-logging/\n        ├── task-2025-08-31-participant-search-button-fix/\n        └── task-2025-08-28-indexer-hook.md\n    ├── task-2025-08-30-persistent-file-logging/\n        ├── Persistent File Logging System.md\n        └── Plan Review - Persistent File Logging System.md\n    ├── task-2025-09-01-complete-participant-display-after-edit/\n        └── Complete Participant Display After Edit.md\n    └── task-2025-09-01-edit-button-icon-standardization/\n        ├── Code Review - Edit Button Icon Standardization and Payment Automation.md\n        ├── Edit Button Icon Standardization and Payment Automation.md\n        ├── Plan Review - Edit Button Icon Standardization and Payment Automation (Updated).md\n        └── Plan Review - Edit Button Icon Standardization and Payment Automation.md\n├── tests/\n    ├── fixtures/\n        └── __init__.py\n    ├── integration/\n        ├── test_bot_handlers/\n        ├── __init__.py\n        ├── test_main.py\n        ├── test_payment_automation_workflow.py\n        └── test_search_to_edit_flow.py\n    ├── unit/\n        ├── test_bot_handlers/\n        ├── test_bot_keyboards/\n        ├── test_config/\n        ├── test_data/\n        ├── test_models/\n        ├── test_services/\n        ├── __init__.py\n        ├── test_main.py\n        ├── test_per_message_functionality.py\n        └── test_search_button_regression.py\n    ├── __init__.py\n    └── test_project_structure.py\n├── CHANGELOG.md\n├── CLAUDE.md (project guidance for Claude Code)\n├── PROJECT_PLAN.md\n├── README.md\n├── project_index.json\n├── pyproject.toml\n└── start_bot.sh (bot startup script)",
    "directory_details": {
      "src/": "Main application source code organized in layers",
      "src/bot/": "Telegram bot presentation layer - handles user interactions",
      "src/bot/handlers/": "Specific Telegram conversation and command handlers",
      "src/models/": "Domain models with Pydantic validation and Airtable integration",
      "src/services/": "Business logic layer - core application functionality",
      "src/data/": "Data access layer with repository pattern implementation",
      "src/data/airtable/": "Airtable-specific data access implementation",
      "src/data/repositories/": "Abstract repository interfaces for data layer abstraction",
      "src/config/": "Configuration management and environment settings",
      "src/utils/": "Common utility functions shared across the application",
      "tests/": "Comprehensive test suite with clear separation of concerns",
      "tests/unit/": "Unit tests that mirror the src/ directory structure",
      "tests/integration/": "End-to-end integration tests for complete workflows",
      "tests/fixtures/": "Shared test data and mock objects",
      "docs/": "Comprehensive project documentation including architecture and business requirements",
      "tasks/": "Development task tracking with markdown files for each feature/bug",
      "requirements/": "Dependency management split by environment (base/dev/test)",
      ".claude/": "Claude Code configuration and automation hooks"
    },
    "key_files": {
      "src/main.py": "Application entry point - initializes bot, loads config, starts polling",
      "src/models/participant.py": "Core domain model with all participant fields, enums, and Airtable mapping",
      "src/services/search_service.py": "Advanced fuzzy search with Russian/English language detection",
      "src/data/airtable/airtable_client.py": "Low-level Airtable API client with rate limiting and error handling",
      "src/data/airtable/airtable_participant_repo.py": "Repository implementation for participant CRUD operations",
      "src/bot/handlers/search_conversation.py": "Main conversation flow for participant search functionality",
      "src/config/settings.py": "Centralized configuration using Pydantic settings with environment variables",
      "src/config/field_mappings.py": "Maps internal field names to Airtable field IDs",
      "tests/conftest.py": "Pytest configuration with fixtures and test setup",
      "CLAUDE.md": "Comprehensive guidance for Claude Code on project patterns and commands",
      "start_bot.sh": "Production-ready bot startup script with environment validation"
    }
  },
  "key_modules": {
    "src/main.py": {
      "role": "application_entry_point",
      "purpose": "",
      "key_exports": [
        "configure_logging",
        "get_file_logging_service",
        "create_application",
        "run_bot",
        "main"
      ],
      "dependencies": [
        "src.config.settings",
        "src.bot.handlers.search_conversation",
        "src.services.file_logging_service"
      ],
      "features": [
        "logging"
      ]
    },
    "src/config/field_mappings.py": {
      "role": "configuration",
      "purpose": "",
      "key_exports": [
        "FieldType",
        "AirtableFieldMapping",
        "SearchFieldMapping",
        "TEXT",
        "LONG_TEXT"
      ],
      "dependencies": [
        "src.models.participant"
      ],
      "features": [
        "enum_types",
        "airtable_integration"
      ]
    },
    "src/config/settings.py": {
      "role": "configuration",
      "purpose": "",
      "key_exports": [
        "DatabaseSettings",
        "TelegramSettings",
        "LoggingSettings",
        "ApplicationSettings",
        "Settings"
      ],
      "dependencies": [
        "src.data.airtable.airtable_client",
        "src.services.file_logging_service"
      ],
      "features": [
        "airtable_integration",
        "logging"
      ]
    },
    "src/utils/test_helper.py": {
      "role": "test",
      "purpose": "",
      "key_exports": [
        "test_function",
        "debug_hook_test",
        "test_hook_trigger",
        "another_test",
        "final_hook_test"
      ],
      "dependencies": [],
      "features": []
    },
    "src/models/participant.py": {
      "role": "domain_model",
      "purpose": "",
      "key_exports": [
        "Gender",
        "Size",
        "Role",
        "Department",
        "PaymentStatus"
      ],
      "dependencies": [],
      "features": [
        "pydantic_validation",
        "enum_types",
        "airtable_integration"
      ]
    },
    "src/data/data_validator.py": {
      "role": "data_access_layer",
      "purpose": "",
      "key_exports": [
        "ValidationResult",
        "DataValidator",
        "validate_participant",
        "validate_participant_strict",
        "validate_field_value"
      ],
      "dependencies": [
        "src.models.participant",
        "src.config.field_mappings",
        "src.data.repositories.participant_repository",
        "src.config.field_mappings"
      ],
      "features": [
        "airtable_integration",
        "logging"
      ]
    },
    "src/services/participant_update_service.py": {
      "role": "business_service",
      "purpose": "",
      "key_exports": [
        "ValidationError",
        "ParticipantUpdateService",
        "TEXT_FIELDS",
        "BUTTON_FIELDS",
        "SPECIAL_FIELDS"
      ],
      "dependencies": [
        "src.models.participant"
      ],
      "features": [
        "logging"
      ]
    },
    "src/services/user_interaction_logger.py": {
      "role": "business_service",
      "purpose": "",
      "key_exports": [
        "InteractionType",
        "LoggingError",
        "UserInteractionLogger",
        "BUTTON_CLICK",
        "BOT_RESPONSE"
      ],
      "dependencies": [
        "src.config.settings"
      ],
      "features": [
        "enum_types",
        "logging"
      ]
    },
    "src/services/file_logging_service.py": {
      "role": "business_service",
      "purpose": "",
      "key_exports": [
        "FileLoggingConfig",
        "FileLoggingService",
        "validate",
        "initialize_directories",
        "get_application_logger"
      ],
      "dependencies": [],
      "features": [
        "logging"
      ]
    },
    "src/services/search_service.py": {
      "role": "business_service",
      "purpose": "",
      "key_exports": [
        "detect_language",
        "parse_name_parts",
        "format_participant_result",
        "normalize_russian",
        "SearchResult"
      ],
      "dependencies": [
        "src.models.participant"
      ],
      "features": [
        "pydantic_validation",
        "logging"
      ]
    },
    "src/data/repositories/participant_repository.py": {
      "role": "data_access_layer",
      "purpose": "",
      "key_exports": [
        "ParticipantRepository",
        "RepositoryError",
        "NotFoundError",
        "ValidationError",
        "DuplicateError"
      ],
      "dependencies": [
        "src.models.participant"
      ],
      "features": [
        "async_patterns",
        "airtable_integration"
      ]
    },
    "src/data/airtable/airtable_client.py": {
      "role": "data_access_layer",
      "purpose": "",
      "key_exports": [
        "AirtableConfig",
        "RateLimiter",
        "AirtableAPIError",
        "AirtableClient",
        "api"
      ],
      "dependencies": [
        "src.data.repositories.participant_repository",
        "src.config.field_mappings"
      ],
      "features": [
        "async_patterns",
        "airtable_integration",
        "logging"
      ]
    },
    "src/data/airtable/airtable_participant_repo.py": {
      "role": "data_access_layer",
      "purpose": "",
      "key_exports": [
        "AirtableParticipantRepository"
      ],
      "dependencies": [
        "src.data.repositories.participant_repository",
        "src.data.airtable.airtable_client",
        "src.models.participant",
        "src.services.search_service"
      ],
      "features": [
        "async_patterns",
        "airtable_integration",
        "logging"
      ]
    },
    "src/bot/keyboards/edit_keyboards.py": {
      "role": "presentation_layer",
      "purpose": "",
      "key_exports": [
        "get_field_icon",
        "create_participant_edit_keyboard",
        "create_field_edit_keyboard",
        "create_save_cancel_keyboard"
      ],
      "dependencies": [
        "src.models.participant"
      ],
      "features": []
    },
    "src/bot/handlers/search_handlers.py": {
      "role": "presentation_layer",
      "purpose": "",
      "key_exports": [
        "SearchStates",
        "get_participant_repository",
        "get_user_interaction_logger",
        "get_main_menu_keyboard",
        "get_search_button_keyboard"
      ],
      "dependencies": [
        "src.services.search_service",
        "src.data.repositories.participant_repository",
        "src.services.user_interaction_logger",
        "src.config.settings",
        "src.data.airtable.airtable_client",
        "src.data.airtable.airtable_participant_repo",
        "src.config.settings",
        "src.bot.handlers.edit_participant_handlers",
        "src.config.settings"
      ],
      "features": [
        "async_patterns",
        "enum_types",
        "airtable_integration",
        "logging"
      ]
    },
    "src/bot/handlers/search_conversation.py": {
      "role": "presentation_layer",
      "purpose": "",
      "key_exports": [
        "get_search_conversation_handler"
      ],
      "dependencies": [
        "src.bot.handlers.search_handlers",
        "src.bot.handlers.edit_participant_handlers"
      ],
      "features": [
        "logging"
      ]
    },
    "src/bot/handlers/edit_participant_handlers.py": {
      "role": "presentation_layer",
      "purpose": "",
      "key_exports": [
        "get_user_interaction_logger",
        "EditStates",
        "get_participant_repository",
        "display_updated_participant",
        "FIELD_SELECTION"
      ],
      "dependencies": [
        "src.models.participant",
        "src.bot.keyboards.edit_keyboards",
        "src.services.participant_update_service",
        "src.services.user_interaction_logger",
        "src.config.settings",
        "src.services.search_service",
        "src.data.airtable.airtable_client",
        "src.data.airtable.airtable_participant_repo",
        "src.config.settings",
        "src.bot.handlers.search_handlers",
        "src.bot.handlers.search_handlers",
        "src.config.settings",
        "src.bot.handlers.search_handlers",
        "src.bot.handlers.search_handlers",
        "src.bot.handlers.search_handlers"
      ],
      "features": [
        "async_patterns",
        "enum_types",
        "airtable_integration",
        "logging"
      ]
    }
  },
  "architecture_patterns": {
    "error_handling": "Structured logging with custom exception hierarchy",
    "data_validation": "Pydantic models with enum validation and custom validators",
    "async_patterns": "Full async/await throughout bot layer",
    "configuration": "Environment-based settings with dataclass validation",
    "repository_pattern": "Abstract repository interface with Airtable implementation",
    "rate_limiting": "Built into Airtable client (5 requests/second default)"
  },
  "key_features": {
    "multilingual_search": {
      "description": "Russian/English name search with automatic language detection",
      "implementation": "src/services/search_service.py:detect_language",
      "algorithms": [
        "cyrillic_character_detection",
        "fuzzy_matching",
        "name_normalization"
      ]
    },
    "airtable_integration": {
      "description": "Complete CRUD operations with participant data",
      "tables": [
        "Participants"
      ],
      "field_mapping": "src/config/field_mappings.py"
    },
    "conversation_flow": {
      "description": "Multi-step Telegram conversation for participant search",
      "states": [
        "search_input",
        "result_display",
        "participant_selection"
      ],
      "implementation": "src/bot/handlers/search_conversation.py"
    }
  },
  "current_development_context": {
    "phase": "Feature enhancement and optimization",
    "recent_completions": [
      "Enhanced Russian name search with fuzzy matching",
      "Language detection for Cyrillic vs Latin scripts",
      "Improved search result formatting"
    ],
    "active_tasks": [
      "Indexer hook implementation for automated project indexing",
      "Search result enhancement with editing capabilities"
    ],
    "known_issues": []
  },
  "testing_approach": {
    "framework": "pytest",
    "structure": "tests/unit/ mirrors src/ structure, tests/integration/ for end-to-end flows",
    "commands": {
      "run_tests": "./venv/bin/pytest tests/ -v",
      "coverage": "./venv/bin/pytest tests/ --cov=src --cov-report=html",
      "type_check": "./venv/bin/mypy src --no-error-summary",
      "lint": "./venv/bin/flake8 src tests"
    }
  },
  "environment_requirements": {
    "required_vars": [
      "TELEGRAM_BOT_TOKEN",
      "AIRTABLE_API_KEY"
    ],
    "optional_vars": [
      "AIRTABLE_BASE_ID",
      "AIRTABLE_TABLE_NAME",
      "LOG_LEVEL",
      "ENVIRONMENT"
    ],
    "setup": "python -m venv venv && source venv/bin/activate && pip install -r requirements/dev.txt"
  },
  "project_statistics": {
    "total_python_files": 17,
    "main_directories": [
      "src/bot",
      "src/services",
      "src/data",
      "src/models",
      "src/config",
      "tests"
    ],
    "key_dependencies": [
      "telegram",
      "airtable",
      "pydantic",
      "rapidfuzz",
      "pytest"
    ]
  }
}