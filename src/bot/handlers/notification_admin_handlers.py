"""
Administrative command handlers for notification configuration.

Provides admin-only commands to control daily statistics notifications:
- /notifications - View status and enable/disable notifications
- /set_notification_time - Configure delivery time and timezone
- /test_stats - Trigger immediate test notification
"""

import logging
from datetime import time
from typing import List

import pytz
from telegram import Update
from telegram.ext import ContextTypes

from src.services.daily_notification_service import (
    DailyNotificationService,
    NotificationError,
)
from src.services.service_factory import get_participant_repository
from src.services.statistics_service import StatisticsService
from src.utils.auth_utils import is_admin_user

logger = logging.getLogger(__name__)


async def handle_notifications_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    Handle /notifications command for viewing and toggling notification status.

    Usage:
        /notifications - Show current status
        /notifications on - Enable notifications
        /notifications off - Disable notifications

    Args:
        update: Telegram update with command
        context: Bot context with settings
    """
    message = update.effective_message
    user = update.effective_user
    if message is None or user is None:
        return

    # Get settings
    settings = context.bot_data.get("settings")
    if not settings:
        await message.reply_text(
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
        )
        return

    # Check admin permission
    if not is_admin_user(user.id, settings):
        await message.reply_text(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
        )
        return

    # Parse arguments
    args: List[str] = context.args or []

    # No arguments - show current status
    if not args:
        status = (
            "‚úÖ –í–∫–ª—é—á–µ–Ω—ã"
            if settings.notification.daily_stats_enabled
            else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        )
        status_message = (
            f"üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status}\n\n"
            f"–í—Ä–µ–º—è: {settings.notification.notification_time}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.notification.timezone}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/notifications on` –∏–ª–∏ `/notifications off` –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        )
        await message.reply_text(status_message, parse_mode="Markdown")
        return

    # Handle enable/disable
    choice = args[0].lower()
    if choice in {"on", "enable", "true"}:
        was_enabled = settings.notification.daily_stats_enabled
        settings.notification.daily_stats_enabled = True
        logger.info(f"User {user.id} ({user.username}) enabled daily notifications")

        # Reschedule notification if scheduler is available
        scheduler = context.bot_data.get("notification_scheduler")
        if scheduler and not was_enabled:
            try:
                await scheduler.schedule_daily_notification()
                await message.reply_text(
                    "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–∫–ª—é—á–µ–Ω—ã –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.\n"
                    f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {settings.notification.notification_time} "
                    f"({settings.notification.timezone})"
                )
            except Exception as e:
                logger.error(f"Failed to schedule notification: {e}", exc_info=True)
                await message.reply_text(
                    "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
                )
        else:
            await message.reply_text(
                "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–∫–ª—é—á–µ–Ω—ã.\n"
                f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {settings.notification.notification_time} "
                f"({settings.notification.timezone})"
            )

    elif choice in {"off", "disable", "false"}:
        was_enabled = settings.notification.daily_stats_enabled
        settings.notification.daily_stats_enabled = False
        logger.info(f"User {user.id} ({user.username}) disabled daily notifications")

        # Remove scheduled notification if scheduler is available
        scheduler = context.bot_data.get("notification_scheduler")
        if scheduler and was_enabled:
            try:
                await scheduler.remove_scheduled_notification()
                await message.reply_text(
                    "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤—ã–∫–ª—é—á–µ–Ω—ã –∏ "
                    "—É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
                )
            except Exception as e:
                logger.error(f"Failed to remove notification: {e}", exc_info=True)
                await message.reply_text(
                    "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
                )
        else:
            await message.reply_text(
                "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤—ã–∫–ª—é—á–µ–Ω—ã."
            )

    else:
        await message.reply_text(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/notifications on` –∏–ª–∏ "
            "`/notifications off`.",
            parse_mode="Markdown",
        )


async def handle_set_notification_time_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    Handle /set_notification_time command for configuring delivery time and timezone.

    Usage:
        /set_notification_time HH:MM [timezone]
        Examples:
            /set_notification_time 14:30
            /set_notification_time 14:30 America/New_York

    Args:
        update: Telegram update with command
        context: Bot context with settings
    """
    message = update.effective_message
    user = update.effective_user
    if message is None or user is None:
        return

    # Get settings
    settings = context.bot_data.get("settings")
    if not settings:
        await message.reply_text(
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
        )
        return

    # Check admin permission
    if not is_admin_user(user.id, settings):
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # Parse arguments
    args: List[str] = context.args or []

    if not args:
        await message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/set_notification_time HH:MM [timezone]`\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {settings.notification.notification_time}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.notification.timezone}\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "  ‚Ä¢ `/set_notification_time 14:30`\n"
            "  ‚Ä¢ `/set_notification_time 09:00 America/New_York`",
            parse_mode="Markdown",
        )
        return

    # Parse and validate time
    time_str = args[0]
    try:
        # Validate time format (HH:MM)
        hour, minute = map(int, time_str.split(":"))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError("Invalid time range")
        # Create time object to validate
        _ = time(hour=hour, minute=minute)
    except (ValueError, AttributeError):
        await message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)."
        )
        return

    # Parse and validate timezone if provided
    timezone_str = settings.notification.timezone
    if len(args) > 1:
        timezone_str = args[1]
        try:
            _ = pytz.timezone(timezone_str)
        except pytz.UnknownTimeZoneError:
            await message.reply_text(
                f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:\n"
                "  ‚Ä¢ Europe/Moscow\n"
                "  ‚Ä¢ America/New_York\n"
                "  ‚Ä¢ Asia/Tokyo"
            )
            return

    # Update settings
    settings.notification.notification_time = time_str
    settings.notification.timezone = timezone_str

    logger.info(
        f"User {user.id} ({user.username}) set notification time to "
        f"{time_str} {timezone_str}"
    )

    # Reschedule notification if enabled and scheduler is available
    scheduler = context.bot_data.get("notification_scheduler")
    if scheduler and settings.notification.daily_stats_enabled:
        try:
            await scheduler.reschedule_notification()
            await message.reply_text(
                f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:\n"
                f"–í—Ä–µ–º—è: {time_str}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}\n\n"
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
            )
        except Exception as e:
            logger.error(f"Failed to reschedule notification: {e}", exc_info=True)
            await message.reply_text(
                f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n"
                f"–í—Ä–µ–º—è: {time_str}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}\n\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )
    else:
        # Construct message with conditional note about disabled state
        disabled_note = (
            "‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–∫–ª—é—á–µ–Ω—ã."
            if not settings.notification.daily_stats_enabled
            else ""
        )
        await message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n"
            f"–í—Ä–µ–º—è: {time_str}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}\n\n"
            f"{disabled_note}"
        )


async def handle_test_stats_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    Handle /test_stats command for sending immediate test notification.

    Triggers an immediate statistics notification to verify configuration
    without waiting for scheduled time.

    Args:
        update: Telegram update with command
        context: Bot context with settings
    """
    message = update.effective_message
    user = update.effective_user
    if message is None or user is None:
        return

    # Get settings
    settings = context.bot_data.get("settings")
    if not settings:
        await message.reply_text(
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
        )
        return

    # Check admin permission
    if not is_admin_user(user.id, settings):
        await message.reply_text(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
        )
        return

    # Send processing message
    await message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")

    try:
        logger.info(
            f"User {user.id} ({user.username}) requested test statistics notification"
        )

        # Create services (same pattern as in main.py)
        repository = get_participant_repository()
        statistics_service = StatisticsService(repository=repository)
        notification_service = DailyNotificationService(
            bot=context.bot, statistics_service=statistics_service
        )

        # Send notification to requesting admin
        await notification_service.send_daily_statistics(user.id)

        logger.info(f"Test notification sent successfully to user {user.id}")
        await message.reply_text(
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤—ã—à–µ."
        )

    except NotificationError as e:
        logger.error(
            f"Failed to send test notification for user {user.id}: {e}",
            exc_info=True,
        )
        await message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
    except Exception as e:
        logger.error(
            f"Unexpected error sending test notification for user {user.id}: {e}",
            exc_info=True,
        )
        await message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
