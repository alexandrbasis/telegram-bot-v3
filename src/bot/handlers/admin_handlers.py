"""Administrative command handlers."""

import logging
from typing import List

from telegram import Update
from telegram.ext import ContextTypes

from src.services.user_interaction_logger import (
    is_user_interaction_logging_enabled,
    set_user_interaction_logging_enabled,
)
from src.utils.auth_utils import invalidate_role_cache, is_admin_user

logger = logging.getLogger(__name__)


async def handle_logging_toggle_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle /logging on|off admin command to toggle interaction logging."""
    message = update.effective_message
    user = update.effective_user
    if message is None or user is None:
        return

    settings = context.bot_data.get("settings")
    if not settings:
        await message.reply_text(
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
        )
        return

    if not is_admin_user(user.id, settings):
        await message.reply_text(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."
        )
        return

    args: List[str] = context.args or []
    if not args:
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if is_user_interaction_logging_enabled() else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
        await message.reply_text(
            "‚ÑπÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å–µ–π—á–∞—Å {}.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/logging on` –∏–ª–∏ `/logging off`".format(status),
            parse_mode="Markdown",
        )
        return

    choice = args[0].lower()
    if choice in {"on", "enable", "true"}:
        set_user_interaction_logging_enabled(True)
        logger.info("User %s (%s) enabled interaction logging", user.id, user.username)
        await message.reply_text("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤–∫–ª—é—á–µ–Ω–æ.")
    elif choice in {"off", "disable", "false"}:
        set_user_interaction_logging_enabled(False)
        logger.info("User %s (%s) disabled interaction logging", user.id, user.username)
        await message.reply_text("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    else:
        await message.reply_text(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/logging on` –∏–ª–∏ `/logging off`.",
            parse_mode="Markdown",
        )


async def handle_auth_refresh_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle /auth_refresh admin command to refresh authorization cache."""
    message = update.effective_message
    user = update.effective_user
    if message is None or user is None:
        return

    settings = context.bot_data.get("settings")
    if not settings:
        await message.reply_text(
            "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
        )
        return

    if not is_admin_user(user.id, settings):
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    # Clear the authorization cache
    invalidate_role_cache()

    logger.info(f"User {user.id} ({user.username}) cleared authorization cache")

    await message.reply_text(
        "‚úÖ –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –í—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç "
        "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ."
    )
